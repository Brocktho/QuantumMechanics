{"version":3,"sources":["NavBar.jsx","Unit1.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","Unit1","useState","a","setA","n","setN","int","setInt","xSin","Array","from","length","Math","floor","_","i","ySin","sqrt","sin","PI","xSintegrated","ySintegrated","abs","data","x","y","type","mode","line","color","width","xaxis","yaxis","fill","layout","height","title","xaxis2","scrollZoom","pattern","value","onChange","e","target","validity","valid","changeN","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd8ae01.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NavBar() {\n    return(\n        <div className='flex flex-row justify-around w-screen h-16 dark:bg-black dark:text-white'>\n            <button className='flex text-center font-bold border-r-2 border-black dark:border-white text-xl w-1/2 items-center justify-center'>Unit 1</button>\n            <button className='flex text-center font-bold border-black dark:border-white text-xl w-1/2 items-center justify-center'>Unit 2</button>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, {useState} from 'react';\nimport Plot from 'react-plotly.js';\n\nfunction Unit1() {\n\n    const [a, setA] = useState(5);\n    const [n, setN] = useState(1);\n    const [int, setInt] = useState(2.5);\n\n    function changeN (e) {\n        if(e.target.validity.valid){\n            setN(e.target.value)\n        }\n    }\n\n    var xSin = Array.from({length:Math.floor(a*100)}, (_,i) => i *.01);\n    var ySin = Array.from({length:Math.floor(a*100)}, (_,i) => Math.sqrt(2/a)*Math.sin((n*Math.PI*i*.01)/a));\n    var xSintegrated = Array.from({length:Math.floor(int * 100)}, (_,i) => i*.01);\n    var ySintegrated = Array.from({length:Math.floor(int * 100)}, (_,i) => Math.abs(Math.sqrt(2/a)*Math.sin((n*Math.PI*i*.01)/a)*Math.sin((n*Math.PI*i*.01)/a)))\n    var ySin2 = Array.from({length:Math.floor(a*100)}, (_,i) => Math.abs(Math.sqrt(2/a)*Math.sin((n*Math.PI*i*.01)/a)*Math.sin((n*Math.PI*i*.01)/a)))\n\n    const plot1 = {\n        x: xSin,\n        y: ySin,\n        type: 'scatter',\n        mode: 'lines',\n        line: {\n            color: 'rgb(20, 200, 150)',\n            width: 2\n        },\n        xaxis: \"x1\",\n        yaxis: \"y1\"\n    }\n\n    const plot2 = {\n        x: xSin,\n        y: ySin2,\n        type: 'scatter',\n        mode: 'lines',\n        line: {\n            color: 'rgba(219, 20, 41, 20)',\n            width: 1\n        },\n        /*xaxis: \"x2\",\n        yaxis: \"y2\" */\n    }\n\n    const plot3 = {\n        x: xSintegrated,\n        y: ySintegrated,\n        fill: 'tozeroy',\n        type: 'scatter',\n        mode: 'none',\n        /*xaxis: \"x2\",\n        yaxis: \"y2\"*/\n    }\n\n    const data = [plot1, plot2, plot3]\n\n    const H = \"<H>\";\n\n    const layout = {\n        width: 640,\n        height: 480,\n        title: 'Sin in Infinite Square Well',\n        /*grid: {\n            rows: 2, \n            columns: 1, \n            pattern: 'independent'\n        },\n        */\n        xaxis: {\n            title: 'Distance',\n        },\n        xaxis2: {\n            title: 'Distance',\n        }\n    }\n\n    return(\n        <div className=\"flex flex-col w-11/12 h-4/5 bg-white dark:bg-black items-center dark:text-white space-y-12\">\n            <h1 className=\"text-3xl font-bold text-grey pt-2 h-8\"> Unit 1: Quantum Mechanic Operators</h1>\n            <div className=\"flex flex-row w-full h-full space-x-12 justify-around\">\n                <div className=\"flex flex-row w-3/5 rounded-3xl bg-red-400 items-center justify-around h-1/2\">\n                    <Plot data={data} layout={layout} scrollZoom={true}/>\n                    <form className='flex flex-col space-y-6 bg-red-400 rounded-3xl'>\n                        <div className=\"flex flex-col w-full space-y-4 items-center\">\n                            <label className=\"text-white text-sm text-center\">Set integration bounds:\n                                <br/>\n                                <input className=\"bg-white dark:bg-black dark:text-white text-black w-32 rounded-xl focus:outline-none pl-2\"type='number' pattern=\"^-?[0-9]\\d*\\.?\\d*$\" value={int} onChange={e => setInt(e.target.value)}/>\n                            </label>\n                            <label className=\"text-white text-sm text-center\">Set width:\n                                <br/>\n                                <input className=\"bg-white text-black dark:bg-black dark:text-white w-32 rounded-xl focus:outline-none pl-2\"type='number' pattern=\"^-?[0-9]\\d*\\.?\\d*$\" value={a} onChange={e => setA(e.target.value)}/>\n                            </label>\n                            <label className='text-white text-sm text-center'>Set n (integers only):\n                                <br/>\n                                <input className=\"bg-white text-black dark:bg-black dark:text-white w-32 rounded-xl focus:outline-none pl-2\" type='number' pattern=\"^-?[0-9]\\d*\\?\\d*$\" value = {n} onChange={e => changeN(e)}/>\n                            </label>\n                            <input type='submit' value='Submit' className='rounded-xl w-4/5 bg-gray-800 h-8 text-white cursor-pointer'/>\n                        </div>\n                    </form>\n                </div>\n                <div className='flex flex-col rounded-xl items-center dark:text-white'>\n                    <h2 className='text-lg font-bold'>Explanation of Operators:</h2>\n                    <body className=\"text-sm\">\n                        Infinite potential well facts: <br/> \n                        1. will alternate even and odd with respect to the center if V(x) is an even function <br/>\n                        2. universally if you go up in energy each state has one more node (see graph) <br/>\n                        3. They are mutually orthogonal, only works if m=n then it normalizes to 1 (Psi(x)^*)(Psi(x)) = 1 (if m = n) <br/>\n                        4. They are complete, as in any other function can be a linear combination of them just like Fourier! <br/> <br/>\n                        Other information: <br/>\n                        {H} is constant through time which shows conservation of energy. <br/>\n                        Almost any oscillatory motion is simple harmonic if amplitude is small enough. <br/>\n                        ladder operators come as a result of non commutating operators. <br/>\n                        a-a+ - a+a- = hbar*Omega <br/>\n                        a+ is raising and a- is lowering <br/>\n                        \n\n                    </body>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Unit1;","import NavBar from './NavBar';\nimport Unit1 from './Unit1';\n\nfunction App() {\n  return (\n    <div className=\"flex flex-col items-center bg-red-600 w-screen h-screen space-y-16\">\n      <NavBar className=\"flex\"/>\n      <Unit1 className=\"flex\"/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}